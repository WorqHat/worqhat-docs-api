openapi: 3.1.0
info:
  title: WorqHat API
  description: >
    # Introduction

    The official API server for WorqHat platform. This API provides endpoints to
    manage workflows, 

    retrieve metrics, and interact with the WorqHat ecosystem.


    # Authentication

    All API requests require authentication using API keys. Include your API key
    in the Authorization header 

    using the format: `Bearer YOUR_API_KEY`.


    # Rate Limiting

    API requests are subject to rate limiting to ensure fair usage. The current
    limits are:

    - 100 requests per minute for standard users

    - 1000 requests per minute for premium users


    # Versioning

    This documentation describes v1.0.0 of the WorqHat API.
  version: 1.0.0
  termsOfService: 'https://worqhat.com/terms'
  contact:
    name: WorqHat Support
    url: 'https://worqhat.com/support'
    email: support@worqhat.com
  license:
    name: Proprietary
    url: 'https://worqhat.com/license'
externalDocs:
  description: WorqHat API Documentation
  url: 'https://docs.worqhat.com/api'
x-organization:
  name: worqhat
  docs: 'https://docs.worqhat.com'
  contact: support@worqhat.com
servers:
  - url: 'http://localhost:3000'
    description: Local development server
  - url: 'https://api.worqhat.com'
    description: Production API server
tags:
  - name: System
    description: System-related endpoints for monitoring and status
  - name: Workflows
    description: Endpoints for managing and analyzing workflows
  - name: Users
    description: User management endpoints
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: API key authentication. Format - "Bearer YOUR_API_KEY"
  parameters:
    startDateParam:
      name: start_date
      in: query
      description: Start date for filtering (YYYY-MM-DD format)
      required: false
      schema:
        type: string
        format: date
        example: '2025-07-01'
    endDateParam:
      name: end_date
      in: query
      description: End date for filtering (YYYY-MM-DD format)
      required: false
      schema:
        type: string
        format: date
        example: '2025-07-24'
    statusParam:
      name: status
      in: query
      description: Filter by workflow status
      required: false
      schema:
        type: string
        enum:
          - completed
          - failed
          - in_progress
  responses:
    Unauthorized:
      description: Unauthorized - Invalid or missing API key
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Bad Request - Invalid parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error type identifier
          example: Unauthorized
        message:
          type: string
          description: Human-readable error message
          example: Valid API key required
        code:
          type: integer
          description: Error code for programmatic identification
          example: 1001
        details:
          type: object
          description: Additional error details if available
          additionalProperties: true
    HealthResponse:
      type: object
      required:
        - status
        - uptime
      properties:
        status:
          type: string
          description: Current health status of the API
          enum:
            - ok
            - degraded
            - maintenance
            - down
          example: ok
        uptime:
          type: number
          description: Server uptime in seconds
          example: 123.45
        version:
          type: string
          description: Current API version
          example: 1.0.0
        environment:
          type: string
          description: Current environment
          enum:
            - development
            - staging
            - production
          example: production
        timestamp:
          type: string
          format: date-time
          description: Current server time
          example: '2025-07-24T17:00:00Z'
        services:
          type: object
          description: Status of dependent services
          properties:
            database:
              type: string
              enum:
                - ok
                - degraded
                - down
              example: ok
    ServerInfoResponse:
      type: object
      properties:
        name:
          type: string
          example: WorqHat API
        version:
          type: string
          example: 1.0.0
        environment:
          type: string
          example: production
    WorkflowStep:
      type: object
      required:
        - step_id
        - name
        - status
        - start_time
      properties:
        step_id:
          type: string
          format: uuid
          description: Unique identifier for the workflow step
        name:
          type: string
          description: Name of the workflow step
          example: Data Processing
        description:
          type: string
          description: Detailed description of the step
          example: Process and transform input data
        status:
          type: string
          description: Current status of the workflow step
          enum:
            - completed
            - failed
            - in_progress
        start_time:
          type: string
          format: date-time
          description: Time when the step started execution
        end_time:
          type: string
          format: date-time
          description: Time when the step completed execution
          nullable: true
        duration_ms:
          type: integer
          description: Duration of step execution in milliseconds
          example: 1500
        error:
          type: object
          description: Error details if the step failed
          nullable: true
          properties:
            code:
              type: string
              description: Error code
              example: TIMEOUT
            message:
              type: string
              description: Error message
              example: Step execution timed out
    Workflow:
      type: object
      properties:
        id:
          type: string
          format: uuid
        workflow_id:
          type: string
          format: uuid
        user_id:
          type: string
        org_id:
          type: string
        start_timestamp:
          type: string
          format: date-time
        end_timestamp:
          type: string
          format: date-time
          nullable: true
        status:
          type: string
          enum:
            - completed
            - failed
            - in_progress
    UserMetrics:
      type: object
      additionalProperties:
        type: object
        properties:
          total:
            type: integer
          completed:
            type: integer
          failed:
            type: integer
          in_progress:
            type: integer
    WorkflowMetricsResponse:
      type: object
      properties:
        metrics:
          type: object
          properties:
            total_workflows:
              type: integer
              example: 2
            completed_workflows:
              type: integer
              example: 2
            failed_workflows:
              type: integer
              example: 0
            in_progress_workflows:
              type: integer
              example: 0
            avg_duration_ms:
              type: number
              example: 8500
            metrics_by_user:
              $ref: '#/components/schemas/UserMetrics'
        workflows:
          type: array
          items:
            $ref: '#/components/schemas/Workflow'
paths:
  /db/query:
    post:
      summary: Execute raw SQL query
      description: >
        Executes a raw SQL query directly against ClickHouse (WorqDB). This
        endpoint provides direct SQL access with security guardrails to prevent
        destructive operations.
      tags:
        - Database
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                query:
                  type: string
                  description: SQL query to execute
                  example: SELECT * FROM users WHERE status = 'active' LIMIT 10
      responses:
        '200':
          description: Query executed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                  query:
                    type: string
                    description: The executed SQL query
                    example: SELECT * FROM users WHERE status = 'active' LIMIT 10
                  executionTime:
                    type: integer
                    description: Query execution time in milliseconds
                    example: 42
        '400':
          description: Bad request or query error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-code-samples:
        - lang: curl
          source: |
            curl -X POST "https://api.worqhat.com/db/query" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer YOUR_API_KEY" \
              -d '{"query": "SELECT * FROM users WHERE status = \'active\' LIMIT 10"}'
        - lang: javascript
          source: |
            const response = await fetch('https://api.worqhat.com/db/query', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer YOUR_API_KEY'
              },
              body: JSON.stringify({
                query: "SELECT * FROM users WHERE status = 'active' LIMIT 10"
              })
            });
            const data = await response.json();
            console.log(data);
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Worqhat from 'worqhat';

            const client = new Worqhat({
              apiKey: 'My API Key',
            });

            const response = await client.db.executeQuery({
              query: "SELECT * FROM users WHERE status = 'active' LIMIT 10",
            });

            console.log(response.data);
        - lang: Python
          source: |-
            from worqhat import Worqhat

            client = Worqhat(
                api_key="My API Key",
            )
            response = client.db.execute_query(
                query="SELECT * FROM users WHERE status = 'active' LIMIT 10",
            )
            print(response.data)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/WorqHat/worqhat-go-sdk"
              "github.com/WorqHat/worqhat-go-sdk/option"
            )

            func main() {
              client := worqhat.NewClient(
                option.WithAPIKey("My API Key"),
              )
              response, err := client.DB.ExecuteQuery(context.TODO(), worqhat.DBExecuteQueryParams{
                Query: "SELECT * FROM users WHERE status = 'active' LIMIT 10",
              })
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", response.Data)
            }
        - lang: Java
          source: |-
            package com.worqhat.api.example;

            import com.worqhat.api.client.WorqhatClient;
            import com.worqhat.api.client.okhttp.WorqhatOkHttpClient;
            import com.worqhat.api.models.db.DbExecuteQueryParams;
            import com.worqhat.api.models.db.DbExecuteQueryResponse;

            public final class Main {
                private Main() {}

                public static void main(String[] args) {
                    WorqhatClient client = WorqhatOkHttpClient.fromEnv();

                    DbExecuteQueryParams params = DbExecuteQueryParams.builder()
                        .query("SELECT * FROM users WHERE status = 'active' LIMIT 10")
                        .build();
                    DbExecuteQueryResponse response = client.db().executeQuery(params);
                }
            }
  /db/insert:
    post:
      summary: Insert data into a table
      description: |
        Inserts a new record into the specified table.
        Organization ID is automatically added for multi-tenant security.
      tags:
        - Database
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - table
                - data
              properties:
                table:
                  type: string
                  description: Table name to insert into
                  example: users
                data:
                  type: object
                  description: Data to insert
                  example:
                    name: John Doe
                    email: john@worqhat.com
      responses:
        '201':
          description: Data inserted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                  message:
                    type: string
                    example: Data inserted successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-code-samples:
        - lang: curl
          source: |
            curl -X POST "https://api.worqhat.com/db/insert" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer YOUR_API_KEY" \
              -d '{
                "table": "users",
                "data": {"name": "John Doe", "email": "john@worqhat.com"}
              }'
        - lang: javascript
          source: |
            const response = await fetch('https://api.worqhat.com/db/insert', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer YOUR_API_KEY'
              },
              body: JSON.stringify({
                table: "users",
                data: {name: "John Doe", email: "john@worqhat.com"}
              })
            });
            const data = await response.json();
            console.log(data);
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Worqhat from 'worqhat';

            const client = new Worqhat({
              apiKey: 'My API Key',
            });

            const response = await client.db.insertRecord({
              data: { name: 'John Doe', email: 'john@worqhat.com' },
              table: 'users',
            });

            console.log(response.data);
        - lang: Python
          source: |-
            from worqhat import Worqhat

            client = Worqhat(
                api_key="My API Key",
            )
            response = client.db.insert_record(
                data={
                    "name": "John Doe",
                    "email": "john@worqhat.com",
                },
                table="users",
            )
            print(response.data)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/WorqHat/worqhat-go-sdk"
              "github.com/WorqHat/worqhat-go-sdk/option"
            )

            func main() {
              client := worqhat.NewClient(
                option.WithAPIKey("My API Key"),
              )
              response, err := client.DB.InsertRecord(context.TODO(), worqhat.DBInsertRecordParams{
                Data: map[string]interface{}{
                "name": "John Doe",
                "email": "john@worqhat.com",
                },
                Table: "users",
              })
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", response.Data)
            }
        - lang: Java
          source: |-
            package com.worqhat.api.example;

            import com.worqhat.api.client.WorqhatClient;
            import com.worqhat.api.client.okhttp.WorqhatOkHttpClient;
            import com.worqhat.api.core.JsonValue;
            import com.worqhat.api.models.db.DbInsertRecordParams;
            import com.worqhat.api.models.db.DbInsertRecordResponse;
            import java.util.Map;

            public final class Main {
                private Main() {}

                public static void main(String[] args) {
                    WorqhatClient client = WorqhatOkHttpClient.fromEnv();

                    DbInsertRecordParams params = DbInsertRecordParams.builder()
                        .data(JsonValue.from(Map.of(
                          "name",
                          "John Doe",
                          "email",
                          "john@worqhat.com"
                        )))
                        .table("users")
                        .build();
                    DbInsertRecordResponse response = client.db().insertRecord(params);
                }
            }
  /db/update:
    put:
      summary: Update data in a table
      description: >
        Updates records in the specified table that match the where conditions.

        Organization ID filtering is automatically applied for multi-tenant
        security.
      tags:
        - Database
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - table
                - data
                - where
              properties:
                table:
                  type: string
                  description: Table name to update
                  example: users
                data:
                  type: object
                  description: Data to update
                  example:
                    status: active
                where:
                  type: object
                  description: Where conditions
                  example:
                    id: '123'
      responses:
        '200':
          description: Data updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                  count:
                    type: integer
                    description: Number of records updated
                  message:
                    type: string
                    example: Data updated successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No records matched the update criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-code-samples:
        - lang: curl
          source: |
            curl -X PUT "https://api.worqhat.com/db/update" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer YOUR_API_KEY" \
              -d '{
                "table": "users",
                "data": {"status": "active"},
                "where": {"id": "123"}
              }'
        - lang: javascript
          source: |
            const response = await fetch('https://api.worqhat.com/db/update', {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer YOUR_API_KEY'
              },
              body: JSON.stringify({
                table: "users",
                data: {status: "active"},
                where: {id: "123"}
              })
            });
            const data = await response.json();
            console.log(data);
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Worqhat from 'worqhat';

            const client = new Worqhat({
              apiKey: 'My API Key',
            });

            const response = await client.db.updateRecords({
              data: { status: 'active' },
              table: 'users',
              where: { id: '123' },
            });

            console.log(response.count);
        - lang: Python
          source: |-
            from worqhat import Worqhat

            client = Worqhat(
                api_key="My API Key",
            )
            response = client.db.update_records(
                data={
                    "status": "active"
                },
                table="users",
                where={
                    "id": "123"
                },
            )
            print(response.count)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/WorqHat/worqhat-go-sdk"
              "github.com/WorqHat/worqhat-go-sdk/option"
            )

            func main() {
              client := worqhat.NewClient(
                option.WithAPIKey("My API Key"),
              )
              response, err := client.DB.UpdateRecords(context.TODO(), worqhat.DBUpdateRecordsParams{
                Data: map[string]interface{}{
                "status": "active",
                },
                Table: "users",
                Where: map[string]interface{}{
                "id": "123",
                },
              })
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", response.Count)
            }
        - lang: Java
          source: |-
            package com.worqhat.api.example;

            import com.worqhat.api.client.WorqhatClient;
            import com.worqhat.api.client.okhttp.WorqhatOkHttpClient;
            import com.worqhat.api.core.JsonValue;
            import com.worqhat.api.models.db.DbUpdateRecordsParams;
            import com.worqhat.api.models.db.DbUpdateRecordsResponse;
            import java.util.Map;

            public final class Main {
                private Main() {}

                public static void main(String[] args) {
                    WorqhatClient client = WorqhatOkHttpClient.fromEnv();

                    DbUpdateRecordsParams params = DbUpdateRecordsParams.builder()
                        .data(JsonValue.from(Map.of(
                          "status", "active"
                        )))
                        .table("users")
                        .where(JsonValue.from(Map.of(
                          "id", "123"
                        )))
                        .build();
                    DbUpdateRecordsResponse response = client.db().updateRecords(params);
                }
            }
  /db/delete:
    delete:
      summary: Delete data from a table
      description: >
        Deletes records from the specified table that match the where
        conditions.

        Organization ID filtering is automatically applied for multi-tenant
        security.
      tags:
        - Database
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - table
                - where
              properties:
                table:
                  type: string
                  description: Table name to delete from
                  example: users
                where:
                  type: object
                  description: Where conditions
                  example:
                    id: '123'
      responses:
        '200':
          description: Data deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                  count:
                    type: integer
                    description: Number of records deleted
                  message:
                    type: string
                    example: Data deleted successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No records matched the delete criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-code-samples:
        - lang: curl
          source: |
            curl -X DELETE "https://api.worqhat.com/db/delete" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer YOUR_API_KEY" \
              -d '{
                "table": "users",
                "where": {"id": "123"}
              }'
        - lang: javascript
          source: |
            const response = await fetch('https://api.worqhat.com/db/delete', {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer YOUR_API_KEY'
              },
              body: JSON.stringify({
                table: "users",
                where: {id: "123"}
              })
            });
            const data = await response.json();
            console.log(data);
      x-codeSamples:
        - lang: JavaScript
          source: >-
            import Worqhat from 'worqhat';


            const client = new Worqhat({
              apiKey: 'My API Key',
            });


            const response = await client.db.deleteRecords({ table: 'users',
            where: { id: '123' } });


            console.log(response.count);
        - lang: Python
          source: |-
            from worqhat import Worqhat

            client = Worqhat(
                api_key="My API Key",
            )
            response = client.db.delete_records(
                table="users",
                where={
                    "id": "123"
                },
            )
            print(response.count)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/WorqHat/worqhat-go-sdk"
              "github.com/WorqHat/worqhat-go-sdk/option"
            )

            func main() {
              client := worqhat.NewClient(
                option.WithAPIKey("My API Key"),
              )
              response, err := client.DB.DeleteRecords(context.TODO(), worqhat.DBDeleteRecordsParams{
                Table: "users",
                Where: map[string]interface{}{
                "id": "123",
                },
              })
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", response.Count)
            }
        - lang: Java
          source: |-
            package com.worqhat.api.example;

            import com.worqhat.api.client.WorqhatClient;
            import com.worqhat.api.client.okhttp.WorqhatOkHttpClient;
            import com.worqhat.api.core.JsonValue;
            import com.worqhat.api.models.db.DbDeleteRecordsParams;
            import com.worqhat.api.models.db.DbDeleteRecordsResponse;
            import java.util.Map;

            public final class Main {
                private Main() {}

                public static void main(String[] args) {
                    WorqhatClient client = WorqhatOkHttpClient.fromEnv();

                    DbDeleteRecordsParams params = DbDeleteRecordsParams.builder()
                        .table("users")
                        .where(JsonValue.from(Map.of(
                          "id", "123"
                        )))
                        .build();
                    DbDeleteRecordsResponse response = client.db().deleteRecords(params);
                }
            }
  /db/nl-query:
    post:
      summary: Process natural language query
      description: |
        Converts a natural language question into a SQL query and executes it.
        Organization ID filtering is automatically applied for multi-tenant security.
      tags:
        - Database
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - question
              properties:
                question:
                  type: string
                  description: Natural language question
                  example: "How many active users do we have?"
                table:
                  type: string
                  description: Table name to query
                  example: "users"
      responses:
        '200':
          description: Query processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                  sql:
                    type: string
                    description: The generated SQL query
                    example: "SELECT COUNT(*) as count FROM users WHERE status = 'active'"
                  message:
                    type: string
                    example: "Query processed successfully"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: Not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-code-samples:
        - lang: curl
          source: |
            curl -X POST "https://api.worqhat.com/db/nl-query" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer YOUR_API_KEY" \
              -d '{
                "question": "How many active users do we have?",
                "table": "users"
              }'
        - lang: javascript
          source: |
            const response = await fetch('https://api.worqhat.com/db/nl-query', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer YOUR_API_KEY'
              },
              body: JSON.stringify({
                question: "How many active users do we have?",
                table: "users"
              })
            });
            const data = await response.json();
            console.log(data);
  /:
    get:
      tags:
        - System
      operationId: getServerInfo
      summary: Server information
      description: Get basic server information and status
      responses:
        '200':
          description: Server information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInfoResponse'
        '500':
          $ref: '#/components/responses/ServerError'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Worqhat from 'worqhat';

            const client = new Worqhat({
              apiKey: 'My API Key',
            });

            const response = await client.getServerInfo();

            console.log(response.environment);
        - lang: Python
          source: |-
            from worqhat import Worqhat

            client = Worqhat(
                api_key="My API Key",
            )
            response = client.get_server_info()
            print(response.environment)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/WorqHat/worqhat-go-sdk"
              "github.com/WorqHat/worqhat-go-sdk/option"
            )

            func main() {
              client := worqhat.NewClient(
                option.WithAPIKey("My API Key"),
              )
              response, err := client.GetServerInfo(context.TODO())
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", response.Environment)
            }
        - lang: Java
          source: |-
            package com.worqhat.api.example;

            import com.worqhat.api.client.WorqhatClient;
            import com.worqhat.api.client.okhttp.WorqhatOkHttpClient;
            import com.worqhat.api.models.ClientGetServerInfoParams;
            import com.worqhat.api.models.ClientGetServerInfoResponse;

            public final class Main {
                private Main() {}

                public static void main(String[] args) {
                    WorqhatClient client = WorqhatOkHttpClient.fromEnv();

                    ClientGetServerInfoResponse response = client.getServerInfo();
                }
            }
  /health:
    get:
      tags:
        - System
      operationId: getHealthStatus
      summary: Health check
      description: |
        Check if the server is running and get uptime information.
        This endpoint can be used for monitoring and alerting systems.
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Worqhat from 'worqhat';

            const client = new Worqhat({
              apiKey: 'My API Key',
            });

            const response = await client.health.check();

            console.log(response.status);
        - lang: Python
          source: |-
            from worqhat import Worqhat

            client = Worqhat(
                api_key="My API Key",
            )
            response = client.health.check()
            print(response.status)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/WorqHat/worqhat-go-sdk"
              "github.com/WorqHat/worqhat-go-sdk/option"
            )

            func main() {
              client := worqhat.NewClient(
                option.WithAPIKey("My API Key"),
              )
              response, err := client.Health.Check(context.TODO())
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", response.Status)
            }
        - lang: Java
          source: |-
            package com.worqhat.api.example;

            import com.worqhat.api.client.WorqhatClient;
            import com.worqhat.api.client.okhttp.WorqhatOkHttpClient;
            import com.worqhat.api.models.health.HealthCheckParams;
            import com.worqhat.api.models.health.HealthCheckResponse;

            public final class Main {
                private Main() {}

                public static void main(String[] args) {
                    WorqhatClient client = WorqhatOkHttpClient.fromEnv();

                    HealthCheckResponse response = client.health().check();
                }
            }
  /flows/metrics:
    get:
      tags:
        - Workflows
      operationId: getWorkflowMetrics
      summary: Get workflow metrics
      description: >
        Get metrics for workflows within a specified date range.

        This endpoint provides aggregated statistics about workflow execution 

        and detailed information about individual workflows.


        The response includes metrics aggregated by user and a list of all
        workflows 

        matching the specified criteria.
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/startDateParam'
        - $ref: '#/components/parameters/endDateParam'
        - $ref: '#/components/parameters/statusParam'
        - name: user_id
          in: query
          description: Filter by specific user ID
          required: false
          schema:
            type: string
            example: member-test-2f9b9a4f-5898-4e7a-8f26-e60cea49ae31
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Worqhat from 'worqhat';

            const client = new Worqhat({
              apiKey: 'My API Key',
            });

            const response = await client.flows.getMetrics();

            console.log(response.metrics);
        - lang: Python
          source: |-
            from worqhat import Worqhat

            client = Worqhat(
                api_key="My API Key",
            )
            response = client.flows.get_metrics()
            print(response.metrics)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/WorqHat/worqhat-go-sdk"
              "github.com/WorqHat/worqhat-go-sdk/option"
            )

            func main() {
              client := worqhat.NewClient(
                option.WithAPIKey("My API Key"),
              )
              response, err := client.Flows.GetMetrics(context.TODO(), worqhat.FlowGetMetricsParams{

              })
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", response.Metrics)
            }
        - lang: Java
          source: |-
            package com.worqhat.api.example;

            import com.worqhat.api.client.WorqhatClient;
            import com.worqhat.api.client.okhttp.WorqhatOkHttpClient;
            import com.worqhat.api.models.flows.FlowGetMetricsParams;
            import com.worqhat.api.models.flows.FlowGetMetricsResponse;

            public final class Main {
                private Main() {}

                public static void main(String[] args) {
                    WorqhatClient client = WorqhatOkHttpClient.fromEnv();

                    FlowGetMetricsResponse response = client.flows().getMetrics();
                }
            }
        - lang: curl
          source: >
            curl -X GET
            "https://api.worqhat.com/flows/metrics?start_date=2025-07-01&end_date=2025-07-24&status=completed"
            \
              -H "Authorization: Bearer YOUR_API_KEY" \
              -H "Content-Type: application/json"
        - lang: javascript
          source: |
            const response = await fetch(
              'https://api.worqhat.com/flows/metrics?start_date=2025-07-01&end_date=2025-07-24',
              {
                headers: {
                  'Authorization': 'Bearer YOUR_API_KEY',
                  'Content-Type': 'application/json'
                }
              }
            );
            const data = await response.json();
      responses:
        '200':
          description: Workflow metrics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowMetricsResponse'
              examples:
                success:
                  summary: Successful response with metrics
                  value:
                    metrics:
                      total_workflows: 2
                      completed_workflows: 2
                      failed_workflows: 0
                      in_progress_workflows: 0
                      avg_duration_ms: 8500
                      metrics_by_user:
                        member-test-2f9b9a4f-5898-4e7a-8f26-e60cea49ae31:
                          total: 2
                          completed: 2
                          failed: 0
                          in_progress: 0
                    workflows:
                      - id: 1f9152dc-dec8-496f-8ba4-ed1c27a72684
                        workflow_id: f825ab82-371f-40cb-9bed-b325531ead4a
                        user_id: member-test-2f9b9a4f-5898-4e7a-8f26-e60cea49ae31
                        org_id: organization-test-1aac0c7e-2c38-453c-8576-9e0cc793a414
                        start_timestamp: '2025-07-16T17:37:36.000Z'
                        end_timestamp: '2025-07-16T17:37:46.000Z'
                        status: completed
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/flows/trigger/{flowId}':
    post:
      tags:
        - Workflows
      operationId: triggerWorkflow
      summary: Trigger a workflow with JSON payload
      description: >
        Trigger a workflow by its ID with a JSON payload.

        This endpoint accepts any valid JSON object as the request body and
        forwards it to the workflow.

        The workflow ID must be specified in the URL path.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: flowId
          in: path
          description: ID of the workflow to trigger
          required: true
          schema:
            type: string
            example: f825ab82-371f-40cb-9bed-b325531ead4a
      requestBody:
        description: JSON payload to send to the workflow
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
            example:
              key1: value1
              key2: value2
      x-codeSamples:
        - lang: JavaScript
          source: >-
            import Worqhat from 'worqhat';


            const client = new Worqhat({
              apiKey: 'My API Key',
            });


            const response = await
            client.flows.triggerWithPayload('f825ab82-371f-40cb-9bed-b325531ead4a',
            {
              body: { key1: 'bar', key2: 'bar' },
            });


            console.log(response.analytics_id);
        - lang: Python
          source: |-
            from worqhat import Worqhat

            client = Worqhat(
                api_key="My API Key",
            )
            response = client.flows.trigger_with_payload(
                flow_id="f825ab82-371f-40cb-9bed-b325531ead4a",
                body={
                    "key1": "bar",
                    "key2": "bar",
                },
            )
            print(response.analytics_id)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/WorqHat/worqhat-go-sdk"
              "github.com/WorqHat/worqhat-go-sdk/option"
            )

            func main() {
              client := worqhat.NewClient(
                option.WithAPIKey("My API Key"),
              )
              response, err := client.Flows.TriggerWithPayload(
                context.TODO(),
                "f825ab82-371f-40cb-9bed-b325531ead4a",
                worqhat.FlowTriggerWithPayloadParams{
                  Body: map[string]any{
                  "key1": "bar",
                  "key2": "bar",
                  },
                },
              )
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", response.AnalyticsID)
            }
        - lang: Java
          source: |-
            package com.worqhat.api.example;

            import com.worqhat.api.client.WorqhatClient;
            import com.worqhat.api.client.okhttp.WorqhatOkHttpClient;
            import com.worqhat.api.core.JsonValue;
            import com.worqhat.api.models.flows.FlowTriggerWithPayloadParams;
            import com.worqhat.api.models.flows.FlowTriggerWithPayloadResponse;

            public final class Main {
                private Main() {}

                public static void main(String[] args) {
                    WorqhatClient client = WorqhatOkHttpClient.fromEnv();

                    FlowTriggerWithPayloadParams params = FlowTriggerWithPayloadParams.builder()
                        .flowId("f825ab82-371f-40cb-9bed-b325531ead4a")
                        .body(FlowTriggerWithPayloadParams.Body.builder()
                            .putAdditionalProperty("key1", JsonValue.from("bar"))
                            .putAdditionalProperty("key2", JsonValue.from("bar"))
                            .build())
                        .build();
                    FlowTriggerWithPayloadResponse response = client.flows().triggerWithPayload(params);
                }
            }
        - lang: curl
          source: >
            curl -X POST
            "https://api.worqhat.com/flows/trigger/f825ab82-371f-40cb-9bed-b325531ead4a"
            \
              -H "Authorization: Bearer YOUR_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                "key1": "value1",
                "key2": "value2"
              }'
        - lang: javascript
          source: |
            const response = await fetch(
              'https://api.worqhat.com/flows/trigger/f825ab82-371f-40cb-9bed-b325531ead4a',
              {
                method: 'POST',
                headers: {
                  'Authorization': 'Bearer YOUR_API_KEY',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  key1: 'value1',
                  key2: 'value2'
                })
              }
            );
            const data = await response.json();
      responses:
        '200':
          description: Workflow triggered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: >-
                      Workflow f825ab82-371f-40cb-9bed-b325531ead4a triggered
                      successfully
                  analytics_id:
                    type: string
                    format: uuid
                    example: 1f9152dc-dec8-496f-8ba4-ed1c27a72684
                  timestamp:
                    type: string
                    format: date-time
                    example: '2025-07-26T03:28:08.123Z'
                  data:
                    type: object
                    additionalProperties: true
                    example:
                      workflow_status: started
                      additional_data: from backend response
              examples:
                success:
                  summary: Successful workflow trigger
                  value:
                    success: true
                    message: >-
                      Workflow f825ab82-371f-40cb-9bed-b325531ead4a triggered
                      successfully
                    analytics_id: 1f9152dc-dec8-496f-8ba4-ed1c27a72684
                    timestamp: '2025-07-26T03:28:08.123Z'
                    data:
                      workflow_status: started
                      additional_data: from backend response
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Workflow not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: Not Found
                message: >-
                  Workflow with ID f825ab82-371f-40cb-9bed-b325531ead4a not
                  found
        '500':
          $ref: '#/components/responses/ServerError'
  '/flows/file/{flowId}':
    post:
      tags:
        - Workflows
      operationId: triggerFileWorkflow
      summary: Trigger a workflow with file upload or URL
      description: >
        Trigger a workflow by its ID with either a file upload or a URL to a
        file.

        This endpoint accepts multipart/form-data with either a file field or a
        URL field.

        When a URL is provided, the server will download the file and process it
        as if it were directly uploaded.

        The workflow ID must be specified in the URL path.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: flowId
          in: path
          description: ID of the workflow to trigger
          required: true
          schema:
            type: string
            example: f825ab82-371f-40cb-9bed-b325531ead4a
      requestBody:
        description: File upload or URL to process
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              oneOf:
                - required:
                    - file
                - required:
                    - url
              properties:
                file:
                  type: string
                  format: binary
                  description: File to upload and process
                url:
                  type: string
                  format: uri
                  description: URL to a file to download and process
                  example: 'https://example.com/path/to/file.pdf'
              additionalProperties:
                type: string
                description: Additional form fields to include with the request
      x-codeSamples:
        - lang: JavaScript
          source: >-
            import Worqhat from 'worqhat';


            const client = new Worqhat({
              apiKey: 'My API Key',
            });


            const response = await
            client.flows.triggerWithFile('f825ab82-371f-40cb-9bed-b325531ead4a');


            console.log(response.data);
        - lang: Python
          source: |-
            from worqhat import Worqhat

            client = Worqhat(
                api_key="My API Key",
            )
            response = client.flows.trigger_with_file(
                flow_id="f825ab82-371f-40cb-9bed-b325531ead4a",
            )
            print(response.data)
        - lang: Go
          source: |
            package main

            import (
              "context"
              "fmt"

              "github.com/WorqHat/worqhat-go-sdk"
              "github.com/WorqHat/worqhat-go-sdk/option"
            )

            func main() {
              client := worqhat.NewClient(
                option.WithAPIKey("My API Key"),
              )
              response, err := client.Flows.TriggerWithFile(
                context.TODO(),
                "f825ab82-371f-40cb-9bed-b325531ead4a",
                worqhat.FlowTriggerWithFileParams{

                },
              )
              if err != nil {
                panic(err.Error())
              }
              fmt.Printf("%+v\n", response.Data)
            }
        - lang: Java
          source: |-
            package com.worqhat.api.example;

            import com.worqhat.api.client.WorqhatClient;
            import com.worqhat.api.client.okhttp.WorqhatOkHttpClient;
            import com.worqhat.api.models.flows.FlowTriggerWithFileParams;
            import com.worqhat.api.models.flows.FlowTriggerWithFileResponse;

            public final class Main {
                private Main() {}

                public static void main(String[] args) {
                    WorqhatClient client = WorqhatOkHttpClient.fromEnv();

                    FlowTriggerWithFileResponse response = client.flows().triggerWithFile("f825ab82-371f-40cb-9bed-b325531ead4a");
                }
            }
        - lang: curl
          source: >
            # Option 1: File Upload

            curl -X POST
            "https://api.worqhat.com/flows/file/f825ab82-371f-40cb-9bed-b325531ead4a"
            \
              -H "Authorization: Bearer YOUR_API_KEY" \
              -F "file=@/path/to/your/file.pdf" \
              -F "metadata={\"key1\":\"value1\",\"key2\":\"value2\"}"

            # Option 2: URL Input

            curl -X POST
            "https://api.worqhat.com/flows/file/f825ab82-371f-40cb-9bed-b325531ead4a"
            \
              -H "Authorization: Bearer YOUR_API_KEY" \
              -F "url=https://example.com/path/to/file.pdf" \
              -F "metadata={\"key1\":\"value1\",\"key2\":\"value2\"}"
        - lang: javascript
          source: >
            // Option 1: File Upload

            const formData = new FormData();

            const fileInput = document.querySelector('input[type="file"]');

            formData.append('file', fileInput.files[0]);

            formData.append('metadata', JSON.stringify({ key1: 'value1', key2:
            'value2' }));


            const response = await fetch(
              'https://api.worqhat.com/flows/file/f825ab82-371f-40cb-9bed-b325531ead4a',
              {
                method: 'POST',
                headers: {
                  'Authorization': 'Bearer YOUR_API_KEY'
                },
                body: formData
              }
            );

            const data = await response.json();


            // Option 2: URL Input

            const formData = new FormData();

            formData.append('url', 'https://example.com/path/to/file.pdf');

            formData.append('metadata', JSON.stringify({ key1: 'value1', key2:
            'value2' }));


            const response = await fetch(
              'https://api.worqhat.com/flows/file/f825ab82-371f-40cb-9bed-b325531ead4a',
              {
                method: 'POST',
                headers: {
                  'Authorization': 'Bearer YOUR_API_KEY'
                },
                body: formData
              }
            );

            const data = await response.json();
      responses:
        '200':
          description: Workflow triggered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Workflow triggered successfully with file upload
                  timestamp:
                    type: string
                    format: date-time
                    example: '2025-07-26T03:28:08.123Z'
                  data:
                    type: object
                    additionalProperties: true
                    example:
                      workflow_status: started
                      additional_data: from backend response
              examples:
                fileUpload:
                  summary: Successful workflow trigger with file upload
                  value:
                    success: true
                    message: Workflow triggered successfully with file upload
                    timestamp: '2025-07-26T03:28:08.123Z'
                    data:
                      workflow_status: started
                      additional_data: from backend response
                urlDownload:
                  summary: Successful workflow trigger with URL download
                  value:
                    success: true
                    message: >-
                      Workflow triggered successfully with file downloaded from
                      URL
                    timestamp: '2025-07-26T03:28:08.123Z'
                    data:
                      workflow_status: started
                      additional_data: from backend response
        '400':
          description: Bad Request - Invalid parameters or file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalidUrl:
                  summary: Invalid URL format
                  value:
                    error: Bad Request
                    message: Invalid URL format
                fileTooLarge:
                  summary: File too large
                  value:
                    error: Bad Request
                    message: File size exceeds the 50MB limit
                missingInput:
                  summary: Missing required input
                  value:
                    error: Bad Request
                    message: Either a file upload or URL is required
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Workflow not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '413':
          description: Payload too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: Payload Too Large
                message: File size exceeds the 50MB limit
        '500':
          $ref: '#/components/responses/ServerError'
