openapi: 3.1.0
info:
  title: WorqHat API
  description: |
    # Introduction
    The official API server for WorqHat platform. This API provides endpoints to manage workflows, 
    retrieve metrics, and interact with the WorqHat ecosystem.
    
    # Authentication
    All API requests require authentication using API keys. Include your API key in the Authorization header 
    using the format: `Bearer YOUR_API_KEY`.
    
    # Versioning
    This documentation describes v1.1.0 of the WorqHat API.
  version: 1.1.0
  termsOfService: https://worqhat.com/terms
  contact:
    name: WorqHat Support
    url: https://worqhat.com/support
    email: support@worqhat.com
  license:
    name: Proprietary
    url: https://worqhat.com/license
externalDocs:
  description: WorqHat API Documentation
  url: https://docs.worqhat.com/api

# Organization details for SDK generation
x-organization:
  name: worqhat
  docs: 'https://docs.worqhat.com'
  contact: 'support@worqhat.com'
servers:
  - url: https://api.worqhat.com
    description: Production API server

tags:
  - name: System
    description: System-related endpoints for monitoring and status
    x-stainless-resource: system
  - name: Workflows
    description: Endpoints for managing and analyzing workflows
    x-stainless-resource: flows
  - name: Database
    description: Database query and manipulation endpoints
    x-stainless-resource: database
  - name: Storage
    description: File storage and management endpoints
    x-stainless-resource: storage

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: API key authentication. Format - "Bearer YOUR_API_KEY"
  
  parameters:
    startDateParam:
      name: start_date
      in: query
      description: Start date for filtering (YYYY-MM-DD format)
      required: false
      schema:
        type: string
        format: date
        example: "2025-07-01"
    
    endDateParam:
      name: end_date
      in: query
      description: End date for filtering (YYYY-MM-DD format)
      required: false
      schema:
        type: string
        format: date
        example: "2025-07-24"
    
    statusParam:
      name: status
      in: query
      description: Filter by workflow status
      required: false
      schema:
        type: string
        enum: [completed, failed, in_progress]
  
  responses:
    Unauthorized:
      description: Unauthorized - Invalid or missing API key
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Forbidden:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    BadRequest:
      description: Bad Request - Invalid parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    ServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  
  schemas:
    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error type identifier
          example: "Unauthorized"
        message:
          type: string
          description: Human-readable error message
          example: "Valid API key required"
        code:
          type: integer
          description: Error code for programmatic identification
          example: 1001
        details:
          type: object
          description: Additional error details if available
          additionalProperties: true
    
    HealthResponse:
      type: object
      required:
        - status
        - uptime
      properties:
        status:
          type: string
          description: Current health status of the API
          enum: [ok, degraded, maintenance, down]
          example: "ok"
        uptime:
          type: number
          description: Server uptime in seconds
          example: 123.45
        version:
          type: string
          description: Current API version
          example: "1.0.0"
        environment:
          type: string
          description: Current environment
          enum: [development, staging, production]
          example: "production"
        timestamp:
          type: string
          format: date-time
          description: Current server time
          example: "2025-07-24T17:00:00Z"
        services:
          type: object
          description: Status of dependent services
          properties:
            database:
              type: string
              enum: [ok, degraded, down]
              example: "ok"
    
    ServerInfoResponse:
      type: object
      properties:
        name:
          type: string
          example: "WorqHat API"
        version:
          type: string
          example: "1.0.0"
        environment:
          type: string
          example: "production"
    
    WorkflowStep:
      type: object
      required:
        - step_id
        - name
        - status
        - start_time
      properties:
        step_id:
          type: string
          format: uuid
          description: Unique identifier for the workflow step
        name:
          type: string
          description: Name of the workflow step
          example: "Data Processing"
        description:
          type: string
          description: Detailed description of the step
          example: "Process and transform input data"
        status:
          type: string
          description: Current status of the workflow step
          enum: [completed, failed, in_progress]
        start_time:
          type: string
          format: date-time
          description: Time when the step started execution
        end_time:
          type: string
          format: date-time
          description: Time when the step completed execution
          nullable: true
        duration_ms:
          type: integer
          description: Duration of step execution in milliseconds
          example: 1500
        error:
          type: object
          description: Error details if the step failed
          nullable: true
          properties:
            code:
              type: string
              description: Error code
              example: "TIMEOUT"
            message:
              type: string
              description: Error message
              example: "Step execution timed out"
    
    Workflow:
      type: object
      properties:
        id:
          type: string
          format: uuid
        workflow_id:
          type: string
          format: uuid
        user_id:
          type: string
        org_id:
          type: string
        start_timestamp:
          type: string
          format: date-time
        end_timestamp:
          type: string
          format: date-time
          nullable: true
        status:
          type: string
          enum: [completed, failed, in_progress]
    
    UserMetrics:
      type: object
      additionalProperties:
        type: object
        properties:
          total:
            type: integer
          completed:
            type: integer
          failed:
            type: integer
          in_progress:
            type: integer
    
    WorkflowMetricsResponse:
      type: object
      properties:
        metrics:
          type: object
          properties:
            total_workflows:
              type: integer
              example: 2
            completed_workflows:
              type: integer
              example: 2
            failed_workflows:
              type: integer
              example: 0
            in_progress_workflows:
              type: integer
              example: 0
            avg_duration_ms:
              type: number
              example: 8500
            metrics_by_user:
              $ref: '#/components/schemas/UserMetrics'
        workflows:
          type: array
          items:
            $ref: '#/components/schemas/Workflow'
    
    TriggerWorkflowRequest:
      type: object
      description: Request payload to trigger a workflow
      additionalProperties: true
      x-body-name: workflowPayload
      properties:
        data:
          type: object
          description: Optional structured data to pass to the workflow
          additionalProperties: true
      example:
        key1: "value1"
        key2: "value2"
        user_data:
          name: "John Doe"
          email: "john@example.com"

paths:
  /db/query:
    post:
      summary: Execute raw SQL query
      description: |
        Executes a raw SQL query directly against the database. Supports both named parameters ({param}) and positional parameters ($1, $2). 
        Provides security guardrails to prevent destructive operations.
      tags:
        - Database
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                query:
                  type: string
                  description: SQL query to execute. Supports both named parameters ({param}) and positional parameters ($1, $2)
                  example: "SELECT * FROM users WHERE slug = {slug}"
                params:
                  oneOf:
                    - type: object
                      description: Named parameters for queries with {param} syntax
                      additionalProperties: true
                      example: {"slug": "summer-vacation-tips"}
                    - type: array
                      description: Positional parameters for queries with $1, $2 syntax
                      items:
                        oneOf:
                          - type: string
                          - type: number
                          - type: boolean
                      example: ["summer-vacation-tips", 123]
                environment:
                  type: string
                  description: Environment to query (development, staging, production)
                  enum: [development, staging, production]
                  example: "production"
      responses:
        '200':
          description: Query executed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      additionalProperties: true
                  query:
                    type: string
                    description: The executed SQL query
                    example: "SELECT * FROM users WHERE slug = $1"
                  executionTime:
                    type: integer
                    description: Query execution time in milliseconds
                    example: 42
        '400':
          description: Bad request or query error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-code-samples:
        - lang: curl
          source: |
            # Named parameters example
            curl -X POST "https://api.worqhat.com/db/query" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer YOUR_API_KEY" \
              -d '{
                "query": "SELECT * FROM likes_data WHERE slug = {slug}",
                "params": {"slug": "summer-vacation-tips"},
                "environment": "production"
              }'
        - lang: curl
          source: |
            # Positional parameters example
            curl -X POST "https://api.worqhat.com/db/query" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer YOUR_API_KEY" \
              -d '{
                "query": "SELECT * FROM likes_data WHERE slug = $1",
                "params": ["summer-vacation-tips"],
                "environment": "production"
              }'
        - lang: javascript
          source: |
            // Named parameters example
            const response = await fetch('https://api.worqhat.com/db/query', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer YOUR_API_KEY'
              },
              body: JSON.stringify({
                query: "SELECT * FROM likes_data WHERE slug = {slug}",
                params: { slug: "summer-vacation-tips" },
                environment: "production"
              })
            });
            const data = await response.json();
            console.log(data);
    
  /db/insert:
    post:
      summary: Insert data into a table
      description: |
        Inserts a new record into the specified table.
        Organization ID is automatically added for multi-tenant security.
      tags:
        - Database
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - table
                - data
              properties:
                table:
                  type: string
                  description: Table name to insert into
                  example: "users"
                data:
                  type: object
                  description: Data to insert
                  additionalProperties: true
                  example: {"name": "John Doe", "email": "john@worqhat.com"}
                environment:
                  type: string
                  description: Environment to insert into (development, staging, production)
                  enum: [development, staging, production]
                  example: "production"
      responses:
        '201':
          description: Data inserted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    additionalProperties: true
                  message:
                    type: string
                    example: "Data inserted successfully"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-code-samples:
        - lang: curl
          source: |
            curl -X POST "https://api.worqhat.com/db/insert" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer YOUR_API_KEY" \
              -d '{
                "table": "users",
                "data": {"name": "John Doe", "email": "john@worqhat.com"},
                "environment": "production"
              }'
        - lang: javascript
          source: |
            const response = await fetch('https://api.worqhat.com/db/insert', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer YOUR_API_KEY'
              },
              body: JSON.stringify({
                table: "users",
                data: {name: "John Doe", email: "john@worqhat.com"},
                environment: "production"
              })
            });
            const data = await response.json();
            console.log(data);

  /db/update:
    put:
      summary: Update data in a table
      description: |
        Updates records in the specified table that match the where conditions.
        Organization ID filtering is automatically applied for multi-tenant security.
      tags:
        - Database
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - table
                - data
                - where
              properties:
                table:
                  type: string
                  description: Table name to update
                  example: "users"
                data:
                  type: object
                  description: Data to update
                  additionalProperties: true
                  example: {"status": "active"}
                where:
                  type: object
                  description: Where conditions
                  additionalProperties: true
                  example: {"id": "123"}
                environment:
                  type: string
                  description: Environment to update in (development, staging, production)
                  enum: [development, staging, production]
                  example: "production"
      responses:
        '200':
          description: Data updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      additionalProperties: true
                  count:
                    type: integer
                    description: Number of records updated
                  message:
                    type: string
                    example: "Data updated successfully"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No records matched the update criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-code-samples:
        - lang: curl
          source: |
            curl -X PUT "https://api.worqhat.com/db/update" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer YOUR_API_KEY" \
              -d '{
                "table": "users",
                "data": {"status": "active"},
                "where": {"id": "123"},
                "environment": "production"
              }'
        - lang: javascript
          source: |
            const response = await fetch('https://api.worqhat.com/db/update', {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer YOUR_API_KEY'
              },
              body: JSON.stringify({
                table: "users",
                data: {status: "active"},
                where: {id: "123"},
                environment: "production"
              })
            });
            const data = await response.json();
            console.log(data);

  /db/delete:
    delete:
      summary: Delete data from a table
      description: |
        Deletes records from the specified table that match the where conditions.
        Organization ID filtering is automatically applied for multi-tenant security.
      tags:
        - Database
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - table
                - where
              properties:
                table:
                  type: string
                  description: Table name to delete from
                  example: "users"
                where:
                  type: object
                  description: Where conditions
                  additionalProperties: true
                  example: {"id": "123"}
                environment:
                  type: string
                  description: Environment to delete from (development, staging, production)
                  enum: [development, staging, production]
                  example: "production"
      responses:
        '200':
          description: Data deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      additionalProperties: true
                  count:
                    type: integer
                    description: Number of records deleted
                  message:
                    type: string
                    example: "Data deleted successfully"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No records matched the delete criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-code-samples:
        - lang: curl
          source: |
            curl -X DELETE "https://api.worqhat.com/db/delete" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer YOUR_API_KEY" \
              -d '{
                "table": "users",
                "where": {"id": "123"},
                "environment": "production"
              }'
        - lang: javascript
          source: |
            const response = await fetch('https://api.worqhat.com/db/delete', {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer YOUR_API_KEY'
              },
              body: JSON.stringify({
                table: "users",
                where: {id: "123"},
                environment: "production"
              })
            });
            const data = await response.json();
            console.log(data);

  /db/nl-query:
    post:
      summary: Process natural language query
      description: |
        Converts a natural language question into a SQL query and executes it.
        Organization ID filtering is automatically applied for multi-tenant security.
      tags:
        - Database
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - question
              properties:
                question:
                  type: string
                  description: Natural language question
                  example: "How many active users do we have?"
                context:
                  type: object
                  description: Optional context for the query
                  additionalProperties: true
                environment:
                  type: string
                  description: Environment to query (development, staging, production)
                  enum: [development, staging, production]
                  example: "production"
      responses:
        '200':
          description: Query processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      additionalProperties: true
                  sql:
                    type: string
                    description: The generated SQL query
                    example: "SELECT COUNT(*) as count FROM users WHERE status = 'active'"
                  message:
                    type: string
                    example: "Query processed successfully"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: Not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-code-samples:
        - lang: curl
          source: |
            curl -X POST "https://api.worqhat.com/db/nl-query" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer YOUR_API_KEY" \
              -d '{
                "question": "How many active users do we have?",
                "table": "users",
                "environment": "production"
              }'
        - lang: javascript
          source: |
            const response = await fetch('https://api.worqhat.com/db/nl-query', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer YOUR_API_KEY'
              },
              body: JSON.stringify({
                question: "How many active users do we have?",
                table: "users",
                environment: "production"
              })
            });
            const data = await response.json();
            console.log(data);
            
  /:
    get:
      tags:
        - System
      operationId: getServerInfo
      summary: Server information
      description: Get basic server information and status
      responses:
        '200':
          description: Server information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInfoResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  
  /health:
    get:
      tags:
        - System
      operationId: getHealthStatus
      summary: Health check
      description: |
        Check if the server is running and get uptime information.
        This endpoint can be used for monitoring and alerting systems.
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
  
  /flows/metrics:
    get:
      tags:
        - Workflows
      operationId: getWorkflowMetrics
      summary: Get workflow metrics
      description: |
        Get metrics for workflows within a specified date range.
        This endpoint provides aggregated statistics about workflow execution 
        and detailed information about individual workflows.
        
        The response includes metrics aggregated by user and a list of all workflows 
        matching the specified criteria.
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/startDateParam'
        - $ref: '#/components/parameters/endDateParam'
        - $ref: '#/components/parameters/statusParam'
        - name: user_id
          in: query
          description: Filter by specific user ID
          required: false
          schema:
            type: string
            example: "member-test-2f9b9a4f-5898-4e7a-8f26-e60cea49ae31"
      x-codeSamples:
        - lang: curl
          source: |
            curl -X GET "https://api.worqhat.com/flows/metrics?start_date=2025-07-01&end_date=2025-07-24&status=completed" \
              -H "Authorization: Bearer YOUR_API_KEY" \
              -H "Content-Type: application/json"
        - lang: javascript
          source: |
            const response = await fetch(
              'https://api.worqhat.com/flows/metrics?start_date=2025-07-01&end_date=2025-07-24',
              {
                headers: {
                  'Authorization': 'Bearer YOUR_API_KEY',
                  'Content-Type': 'application/json'
                }
              }
            );
            const data = await response.json();
      responses:
        '200':
          description: Workflow metrics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowMetricsResponse'
              examples:
                success:
                  summary: Successful response with metrics
                  value: {
                    "metrics": {
                      "total_workflows": 2,
                      "completed_workflows": 2,
                      "failed_workflows": 0,
                      "in_progress_workflows": 0,
                      "avg_duration_ms": 8500,
                      "metrics_by_user": {
                        "member-test-2f9b9a4f-5898-4e7a-8f26-e60cea49ae31": {
                          "total": 2,
                          "completed": 2,
                          "failed": 0,
                          "in_progress": 0
                        }
                      }
                    },
                    "workflows": [
                      {
                        "id": "1f9152dc-dec8-496f-8ba4-ed1c27a72684",
                        "workflow_id": "f825ab82-371f-40cb-9bed-b325531ead4a",
                        "user_id": "member-test-2f9b9a4f-5898-4e7a-8f26-e60cea49ae31",
                        "org_id": "organization-test-1aac0c7e-2c38-453c-8576-9e0cc793a414",
                        "start_timestamp": "2025-07-16T17:37:36.000Z",
                        "end_timestamp": "2025-07-16T17:37:46.000Z",
                        "status": "completed"
                      }
                    ]
                  }
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /flows/trigger/{flowId}:
    post:
      tags:
        - Workflows
      operationId: triggerWorkflow
      summary: Trigger a workflow with JSON payload
      description: |
        Trigger a workflow by its ID with a JSON payload.
        This endpoint accepts any valid JSON object as the request body and forwards it to the workflow.
        The workflow ID must be specified in the URL path.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: flowId
          in: path
          description: ID of the workflow to trigger
          required: true
          schema:
            type: string
            example: "f825ab82-371f-40cb-9bed-b325531ead4a"
      requestBody:
        description: JSON payload to send to the workflow
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerWorkflowRequest'
      x-codeSamples:
        - lang: curl
          source: |
            curl -X POST "https://api.worqhat.com/flows/trigger/f825ab82-371f-40cb-9bed-b325531ead4a" \
              -H "Authorization: Bearer YOUR_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                "key1": "value1",
                "key2": "value2"
              }'
        - lang: javascript
          source: |
            const response = await fetch(
              'https://api.worqhat.com/flows/trigger/f825ab82-371f-40cb-9bed-b325531ead4a',
              {
                method: 'POST',
                headers: {
                  'Authorization': 'Bearer YOUR_API_KEY',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  key1: 'value1',
                  key2: 'value2'
                })
              }
            );
            const data = await response.json();
      responses:
        '200':
          description: Workflow triggered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Workflow f825ab82-371f-40cb-9bed-b325531ead4a triggered successfully"
                  analytics_id:
                    type: string
                    format: uuid
                    example: "1f9152dc-dec8-496f-8ba4-ed1c27a72684"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-07-26T03:28:08.123Z"
                  data:
                    type: object
                    additionalProperties: true
                    example:
                      workflow_status: "started"
                      additional_data: "from backend response"
              examples:
                success:
                  summary: Successful workflow trigger
                  value: {
                    "success": true,
                    "message": "Workflow f825ab82-371f-40cb-9bed-b325531ead4a triggered successfully",
                    "analytics_id": "1f9152dc-dec8-496f-8ba4-ed1c27a72684",
                    "timestamp": "2025-07-26T03:28:08.123Z",
                    "data": {
                      "workflow_status": "started",
                      "additional_data": "from backend response"
                    }
                  }
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Workflow not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Not Found"
                message: "Workflow with ID f825ab82-371f-40cb-9bed-b325531ead4a not found"
        '500':
          $ref: '#/components/responses/ServerError'

  /flows/file/{flowId}:
    post:
      tags:
        - Workflows
      operationId: triggerFileWorkflow
      summary: Trigger a workflow with file upload or URL
      description: |
        Trigger a workflow by its ID with either a file upload or a URL to a file.
        This endpoint accepts multipart/form-data with either a file field or a URL field.
        When a URL is provided, the server will download the file and process it as if it were directly uploaded.
        The workflow ID must be specified in the URL path.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: flowId
          in: path
          description: ID of the workflow to trigger
          required: true
          schema:
            type: string
            example: "f825ab82-371f-40cb-9bed-b325531ead4a"
      requestBody:
        description: File upload or URL to process
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              oneOf:
                - required: [file]
                - required: [url]
              properties:
                file:
                  type: string
                  format: binary
                  description: File to upload and process
                url:
                  type: string
                  format: uri
                  description: URL to a file to download and process
                  example: "https://example.com/path/to/file.pdf"
              additionalProperties:
                type: string
                description: Additional form fields to include with the request
      x-codeSamples:
        - lang: curl
          source: |
            # Option 1: File Upload
            curl -X POST "https://api.worqhat.com/flows/file/f825ab82-371f-40cb-9bed-b325531ead4a" \
              -H "Authorization: Bearer YOUR_API_KEY" \
              -F "file=@/path/to/your/file.pdf" \
              -F "metadata={\"key1\":\"value1\",\"key2\":\"value2\"}"
            
            # Option 2: URL Input
            curl -X POST "https://api.worqhat.com/flows/file/f825ab82-371f-40cb-9bed-b325531ead4a" \
              -H "Authorization: Bearer YOUR_API_KEY" \
              -F "url=https://example.com/path/to/file.pdf" \
              -F "metadata={\"key1\":\"value1\",\"key2\":\"value2\"}"
        - lang: javascript
          source: |
            // Option 1: File Upload
            const formData = new FormData();
            const fileInput = document.querySelector('input[type="file"]');
            formData.append('file', fileInput.files[0]);
            formData.append('metadata', JSON.stringify({ key1: 'value1', key2: 'value2' }));
            
            const response = await fetch(
              'https://api.worqhat.com/flows/file/f825ab82-371f-40cb-9bed-b325531ead4a',
              {
                method: 'POST',
                headers: {
                  'Authorization': 'Bearer YOUR_API_KEY'
                },
                body: formData
              }
            );
            const data = await response.json();
            
            // Option 2: URL Input
            const formData = new FormData();
            formData.append('url', 'https://example.com/path/to/file.pdf');
            formData.append('metadata', JSON.stringify({ key1: 'value1', key2: 'value2' }));
            
            const response = await fetch(
              'https://api.worqhat.com/flows/file/f825ab82-371f-40cb-9bed-b325531ead4a',
              {
                method: 'POST',
                headers: {
                  'Authorization': 'Bearer YOUR_API_KEY'
                },
                body: formData
              }
            );
            const data = await response.json();
      responses:
        '200':
          description: Workflow triggered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Workflow triggered successfully with file upload"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-07-26T03:28:08.123Z"
                  data:
                    type: object
                    additionalProperties: true
                    example:
                      workflow_status: "started"
                      additional_data: "from backend response"
              examples:
                fileUpload:
                  summary: Successful workflow trigger with file upload
                  value: {
                    "success": true,
                    "message": "Workflow triggered successfully with file upload",
                    "timestamp": "2025-07-26T03:28:08.123Z",
                    "data": {
                      "workflow_status": "started",
                      "additional_data": "from backend response"
                    }
                  }
                urlDownload:
                  summary: Successful workflow trigger with URL download
                  value: {
                    "success": true,
                    "message": "Workflow triggered successfully with file downloaded from URL",
                    "timestamp": "2025-07-26T03:28:08.123Z",
                    "data": {
                      "workflow_status": "started",
                      "additional_data": "from backend response"
                    }
                  }
        '400':
          description: Bad Request - Invalid parameters or file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalidUrl:
                  summary: Invalid URL format
                  value: {
                    "error": "Bad Request",
                    "message": "Invalid URL format"
                  }
                fileTooLarge:
                  summary: File too large
                  value: {
                    "error": "Bad Request",
                    "message": "File size exceeds the 50MB limit"
                  }
                missingInput:
                  summary: Missing required input
                  value: {
                    "error": "Bad Request",
                    "message": "Either a file upload or URL is required"
                  }
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Workflow not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '413':
          description: Payload too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Payload Too Large"
                message: "File size exceeds the 50MB limit"
        '500':
          $ref: '#/components/responses/ServerError'

  /db/tables:
    get:
      summary: List all available tables
      description: |
        Returns a list of all tables in the database that are accessible to your organization.
        Optionally filter by schema and environment.
      tags:
        - Database
      security:
        - ApiKeyAuth: []
      parameters:
        - name: environment
          in: query
          description: Environment to query (development, staging, production)
          required: false
          schema:
            type: string
            enum: [development, staging, production]
            example: "production"
        - name: schema
          in: query
          description: Database schema to filter tables
          required: false
          schema:
            type: string
            example: "public"
      responses:
        '200':
          description: List of tables retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  tables:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: "users"
                        schema:
                          type: string
                          example: "public"
                        type:
                          type: string
                          example: "BASE TABLE"
                  count:
                    type: integer
                    description: Total number of tables
                    example: 15
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
      x-code-samples:
        - lang: curl
          source: |
            curl -X GET "https://api.worqhat.com/db/tables?environment=production" \
              -H "Authorization: Bearer YOUR_API_KEY"
        - lang: javascript
          source: |
            const response = await fetch('https://api.worqhat.com/db/tables?environment=production', {
              headers: {
                'Authorization': 'Bearer YOUR_API_KEY'
              }
            });
            const data = await response.json();

  /db/tables/{tableName}/schema:
    get:
      summary: Get table schema information
      description: |
        Returns detailed schema information for a specific table, including column names, types, and constraints.
      tags:
        - Database
      security:
        - ApiKeyAuth: []
      parameters:
        - name: tableName
          in: path
          description: Name of the table
          required: true
          schema:
            type: string
            example: "users"
        - name: environment
          in: query
          description: Environment to query
          required: false
          schema:
            type: string
            enum: [development, staging, production]
            example: "production"
      responses:
        '200':
          description: Table schema retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  table:
                    type: string
                    example: "users"
                  columns:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: "id"
                        type:
                          type: string
                          example: "uuid"
                        nullable:
                          type: boolean
                          example: false
                        default:
                          type: string
                          nullable: true
                          example: "gen_random_uuid()"
                        isPrimaryKey:
                          type: boolean
                          example: true
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Table not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/ServerError'
      x-code-samples:
        - lang: curl
          source: |
            curl -X GET "https://api.worqhat.com/db/tables/users/schema" \
              -H "Authorization: Bearer YOUR_API_KEY"
        - lang: javascript
          source: |
            const response = await fetch('https://api.worqhat.com/db/tables/users/schema', {
              headers: {
                'Authorization': 'Bearer YOUR_API_KEY'
              }
            });
            const data = await response.json();

  /db/tables/{tableName}/count:
    get:
      summary: Get row count for a table
      description: |
        Returns the total number of rows in the specified table for your organization.
      tags:
        - Database
      security:
        - ApiKeyAuth: []
      parameters:
        - name: tableName
          in: path
          description: Name of the table
          required: true
          schema:
            type: string
            example: "users"
        - name: environment
          in: query
          description: Environment to query
          required: false
          schema:
            type: string
            enum: [development, staging, production]
            example: "production"
      responses:
        '200':
          description: Row count retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  table:
                    type: string
                    example: "users"
                  count:
                    type: integer
                    example: 1523
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Table not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/ServerError'
      x-code-samples:
        - lang: curl
          source: |
            curl -X GET "https://api.worqhat.com/db/tables/users/count" \
              -H "Authorization: Bearer YOUR_API_KEY"
        - lang: javascript
          source: |
            const response = await fetch('https://api.worqhat.com/db/tables/users/count', {
              headers: {
                'Authorization': 'Bearer YOUR_API_KEY'
              }
            });
            const data = await response.json();

  /db/batch:
    post:
      summary: Execute multiple operations in a transaction
      description: |
        Executes multiple database operations (queries, inserts, updates, deletes) in a single transaction.
        If transactional is true, all operations will be rolled back if any operation fails.
      tags:
        - Database
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - operations
              properties:
                operations:
                  type: array
                  description: Array of database operations to execute
                  items:
                    type: object
                    required:
                      - type
                    properties:
                      type:
                        type: string
                        enum: [query, insert, update, delete]
                        description: Type of operation
                      table:
                        type: string
                        description: Table name (required for insert, update, delete)
                      query:
                        type: string
                        description: SQL query (required for query type)
                      data:
                        type: object
                        description: Data to insert or update
                        additionalProperties: true
                      where:
                        type: object
                        description: Where conditions for update or delete
                        additionalProperties: true
                environment:
                  type: string
                  enum: [development, staging, production]
                  description: Environment to execute operations in
                transactional:
                  type: boolean
                  description: Whether to execute all operations in a single transaction
                  default: true
            example:
              operations:
                - type: insert
                  table: users
                  data:
                    name: "John Doe"
                    email: "john@example.com"
                - type: update
                  table: users
                  data:
                    status: "active"
                  where:
                    email: "john@example.com"
                - type: query
                  query: "SELECT * FROM users WHERE status = 'active'"
              transactional: true
      responses:
        '200':
          description: Batch operations executed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  results:
                    type: array
                    description: Results from each operation
                    items:
                      type: object
                      properties:
                        operation:
                          type: string
                          example: "insert"
                        success:
                          type: boolean
                          example: true
                        data:
                          type: object
                          additionalProperties: true
                  executedCount:
                    type: integer
                    description: Number of operations executed
                    example: 3
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
      x-code-samples:
        - lang: curl
          source: |
            curl -X POST "https://api.worqhat.com/db/batch" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer YOUR_API_KEY" \
              -d '{
                "operations": [
                  {
                    "type": "insert",
                    "table": "users",
                    "data": {"name": "John Doe", "email": "john@example.com"}
                  },
                  {
                    "type": "update",
                    "table": "users",
                    "data": {"status": "active"},
                    "where": {"email": "john@example.com"}
                  }
                ],
                "transactional": true
              }'
        - lang: javascript
          source: |
            const response = await fetch('https://api.worqhat.com/db/batch', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer YOUR_API_KEY'
              },
              body: JSON.stringify({
                operations: [
                  {
                    type: 'insert',
                    table: 'users',
                    data: {name: 'John Doe', email: 'john@example.com'}
                  },
                  {
                    type: 'update',
                    table: 'users',
                    data: {status: 'active'},
                    where: {email: 'john@example.com'}
                  }
                ],
                transactional: true
              })
            });
            const data = await response.json();

  # AI-Native Database Endpoints

  /db/semantic-search:
    post:
      summary: Semantic search using vector embeddings
      description: |
        Performs semantic search across database tables using vector embeddings. 
        Supports both single table and cross-table searches with configurable similarity thresholds.
        Returns records with similarity scores and metadata about matched fields.
      tags:
        - Database
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                query:
                  type: string
                  description: Natural language search query
                  example: "Find products related to machine learning"
                table:
                  type: string
                  description: Single table to search in (optional if tables is provided)
                  example: "products"
                tables:
                  type: array
                  items:
                    type: string
                  description: Multiple tables to search across (optional if table is provided)
                  example: ["products", "articles", "documents"]
                limit:
                  type: number
                  minimum: 1
                  maximum: 100
                  default: 10
                  description: Maximum number of results to return
                threshold:
                  type: number
                  minimum: 0
                  maximum: 1
                  default: 0.7
                  description: Minimum similarity score threshold
                filters:
                  type: object
                  additionalProperties: true
                  description: Additional WHERE conditions to apply
                  example: {"category": "electronics", "price": {"min": 100, "max": 500}}
                environment:
                  type: string
                  description: Environment to search in (development, staging, production)
                  enum: [development, staging, production]
                  example: "production"
      responses:
        '200':
          description: Semantic search completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        table:
                          type: string
                          example: "products"
                        record:
                          type: object
                          additionalProperties: true
                        similarity:
                          type: number
                          description: Similarity score (0-1)
                          example: 0.847
                        _meta:
                          type: object
                          properties:
                            matched_fields:
                              type: array
                              items:
                                type: string
                              example: ["title", "description"]
                  query_embedding_preview:
                    type: array
                    items:
                      type: number
                    description: First 5 dimensions of the query embedding
                    example: [0.123, -0.456, 0.789, -0.321, 0.654]
                  executionTime:
                    type: number
                    description: Search execution time in milliseconds
                    example: 245
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-code-samples:
        - lang: curl
          source: |
            curl -X POST "https://api.worqhat.com/db/semantic-search" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer YOUR_API_KEY" \
              -d '{
                "query": "Find products related to machine learning",
                "table": "products",
                "limit": 10,
                "threshold": 0.7,
                "environment": "production"
              }'
        - lang: javascript
          source: |
            const response = await fetch('https://api.worqhat.com/db/semantic-search', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer YOUR_API_KEY'
              },
              body: JSON.stringify({
                query: 'Find products related to machine learning',
                table: 'products',
                limit: 10,
                threshold: 0.7,
                environment: 'production'
              })
            });
            const data = await response.json();

  /db/hybrid-search:
    post:
      summary: Hybrid semantic + keyword search
      description: |
        Combines semantic search using vector embeddings with traditional keyword search.
        Provides weighted scoring between semantic similarity and keyword matching.
        Ideal for queries that need both contextual understanding and exact term matching.
      tags:
        - Database
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
                - table
              properties:
                query:
                  type: string
                  description: Search query combining natural language and keywords
                  example: "machine learning algorithms neural networks"
                table:
                  type: string
                  description: Table to search in
                  example: "products"
                text_columns:
                  type: array
                  items:
                    type: string
                  description: Columns to include in keyword search
                  default: ["description", "content", "title", "name"]
                  example: ["title", "description", "tags"]
                semantic_weight:
                  type: number
                  minimum: 0
                  maximum: 1
                  default: 0.7
                  description: Weight for semantic similarity score
                keyword_weight:
                  type: number
                  minimum: 0
                  maximum: 1
                  default: 0.3
                  description: Weight for keyword matching score
                limit:
                  type: number
                  minimum: 1
                  maximum: 100
                  default: 10
                  description: Maximum number of results to return
                environment:
                  type: string
                  description: Environment to search in (development, staging, production)
                  enum: [development, staging, production]
                  example: "production"
      responses:
        '200':
          description: Hybrid search completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        record:
                          type: object
                          additionalProperties: true
                        combined_score:
                          type: number
                          description: Combined semantic + keyword score
                          example: 0.823
                        semantic_score:
                          type: number
                          description: Semantic similarity score
                          example: 0.756
                        keyword_score:
                          type: number
                          description: Keyword matching score
                          example: 0.234
                        _meta:
                          type: object
                          properties:
                            search_type:
                              type: string
                              example: "hybrid"
                            weights:
                              type: object
                              properties:
                                semantic:
                                  type: number
                                  example: 0.7
                                keyword:
                                  type: number
                                  example: 0.3
                  query_embedding_preview:
                    type: array
                    items:
                      type: number
                    description: First 5 dimensions of the query embedding
                    example: [0.123, -0.456, 0.789, -0.321, 0.654]
                  executionTime:
                    type: number
                    description: Search execution time in milliseconds
                    example: 312
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-code-samples:
        - lang: curl
          source: |
            curl -X POST "https://api.worqhat.com/db/hybrid-search" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer YOUR_API_KEY" \
              -d '{
                "query": "machine learning algorithms neural networks",
                "table": "products",
                "semantic_weight": 0.7,
                "keyword_weight": 0.3,
                "limit": 10,
                "environment": "production"
              }'

  /db/find-similar:
    post:
      summary: Find records similar to a specific record
      description: |
        Finds records similar to a specific existing record using vector embeddings.
        Useful for "More like this" functionality and cross-table similarity search.
        Returns similarity scores and supports excluding the source record.
      tags:
        - Database
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - table
                - record_id
              properties:
                table:
                  type: string
                  description: Table containing the source record
                  example: "products"
                record_id:
                  anyOf:
                    - type: string
                    - type: number
                  description: ID of the source record
                  example: "123"
                limit:
                  type: number
                  minimum: 1
                  maximum: 100
                  default: 10
                  description: Maximum number of similar records to return
                threshold:
                  type: number
                  minimum: 0
                  maximum: 1
                  default: 0.7
                  description: Minimum similarity score threshold
                exclude_self:
                  type: boolean
                  default: true
                  description: Whether to exclude the source record from results
                target_table:
                  type: string
                  description: Different table to search in (optional)
                  example: "articles"
                environment:
                  type: string
                  description: Environment to search in (development, staging, production)
                  enum: [development, staging, production]
                  example: "production"
      responses:
        '200':
          description: Similar records found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  source_record:
                    type: object
                    additionalProperties: true
                    description: The original record used for similarity search
                  similar_records:
                    type: array
                    items:
                      type: object
                      properties:
                        table:
                          type: string
                          example: "products"
                        record:
                          type: object
                          additionalProperties: true
                        similarity:
                          type: number
                          description: Similarity score (0-1)
                          example: 0.891
                  executionTime:
                    type: number
                    description: Search execution time in milliseconds
                    example: 156
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Source record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-code-samples:
        - lang: curl
          source: |
            curl -X POST "https://api.worqhat.com/db/find-similar" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer YOUR_API_KEY" \
              -d '{
                "table": "products",
                "record_id": "123",
                "limit": 10,
                "threshold": 0.7,
                "exclude_self": true,
                "environment": "production"
              }'

  /db/recommend:
    post:
      summary: Generate recommendations using embeddings
      description: |
        Generates item recommendations using vector embeddings and collaborative filtering.
        Supports multiple recommendation strategies including similar items, diverse recommendations,
        and user history-based recommendations.
      tags:
        - Database
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - table
              properties:
                table:
                  type: string
                  description: Table to generate recommendations from
                  example: "products"
                record_id:
                  anyOf:
                    - type: string
                    - type: number
                  description: Source item ID for item-to-item recommendations
                  example: "123"
                user_history:
                  type: array
                  items:
                    type: string
                  description: Array of record IDs the user has interacted with
                  example: ["123", "456", "789"]
                strategy:
                  type: string
                  enum: [similar, diverse, popular]
                  default: similar
                  description: Recommendation strategy to use
                limit:
                  type: number
                  minimum: 1
                  maximum: 100
                  default: 10
                  description: Maximum number of recommendations to return
                exclude_ids:
                  type: array
                  items:
                    type: string
                  description: Record IDs to exclude from recommendations
                  example: ["123", "456"]
                environment:
                  type: string
                  description: Environment to search in (development, staging, production)
                  enum: [development, staging, production]
                  example: "production"
      responses:
        '200':
          description: Recommendations generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  recommendations:
                    type: array
                    items:
                      type: object
                      properties:
                        record:
                          type: object
                          additionalProperties: true
                        similarity:
                          type: number
                          description: Similarity score (0-1)
                          example: 0.823
                        _meta:
                          type: object
                          properties:
                            strategy:
                              type: string
                              example: "similar"
                            source:
                              type: string
                              example: "single_item"
                  strategy:
                    type: string
                    description: Strategy used for recommendations
                    example: "similar"
                  executionTime:
                    type: number
                    description: Recommendation generation time in milliseconds
                    example: 189
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-code-samples:
        - lang: curl
          source: |
            curl -X POST "https://api.worqhat.com/db/recommend" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer YOUR_API_KEY" \
              -d '{
                "table": "products",
                "record_id": "123",
                "strategy": "similar",
                "limit": 10,
                "environment": "production"
              }'

  /db/detect-anomalies:
    post:
      summary: Detect anomalous records using embeddings
      description: |
        Identifies anomalous or outlier records using K-nearest neighbors analysis on vector embeddings.
        Useful for fraud detection, data quality checks, and identifying unusual patterns.
        Returns anomaly scores and nearest neighbors for each detected anomaly.
      tags:
        - Database
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - table
              properties:
                table:
                  type: string
                  description: Table to analyze for anomalies
                  example: "transactions"
                k:
                  type: number
                  minimum: 1
                  maximum: 50
                  default: 10
                  description: Number of nearest neighbors to consider
                threshold:
                  type: number
                  minimum: 0
                  maximum: 1
                  default: 0.8
                  description: Minimum anomaly score threshold
                limit:
                  type: number
                  minimum: 1
                  maximum: 100
                  default: 50
                  description: Maximum number of anomalies to return
                environment:
                  type: string
                  description: Environment to analyze (development, staging, production)
                  enum: [development, staging, production]
                  example: "production"
      responses:
        '200':
          description: Anomaly detection completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  anomalies:
                    type: array
                    items:
                      type: object
                      properties:
                        record:
                          type: object
                          additionalProperties: true
                        anomaly_score:
                          type: number
                          description: Anomaly score (0-1, higher = more unusual)
                          example: 0.923
                        avg_distance:
                          type: number
                          description: Average distance to K nearest neighbors
                          example: 0.456
                        nearest_neighbors:
                          type: array
                          items:
                            type: object
                            properties:
                              record:
                                type: object
                                additionalProperties: true
                              distance:
                                type: number
                                example: 0.234
                  total_records:
                    type: number
                    description: Total number of records analyzed
                    example: 1000
                  anomaly_count:
                    type: number
                    description: Number of anomalies detected
                    example: 15
                  parameters:
                    type: object
                    properties:
                      k:
                        type: number
                        example: 10
                      threshold:
                        type: number
                        example: 0.8
                  executionTime:
                    type: number
                    description: Analysis execution time in milliseconds
                    example: 1247
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-code-samples:
        - lang: curl
          source: |
            curl -X POST "https://api.worqhat.com/db/detect-anomalies" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer YOUR_API_KEY" \
              -d '{
                "table": "transactions",
                "k": 10,
                "threshold": 0.8,
                "limit": 50,
                "environment": "production"
              }'

  /db/cluster:
    post:
      summary: Auto-cluster records using K-means on embeddings
      description: |
        Performs K-means clustering on vector embeddings to automatically group similar records.
        Supports auto-detection of optimal cluster count and AI-generated cluster labels.
        Returns cluster information including centroids, sample records, and quality metrics.
      tags:
        - Database
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - table
              properties:
                table:
                  type: string
                  description: Table to cluster
                  example: "products"
                num_clusters:
                  type: number
                  minimum: 2
                  maximum: 20
                  description: Number of clusters (auto-detected if not provided)
                  example: 5
                min_clusters:
                  type: number
                  minimum: 2
                  maximum: 10
                  default: 2
                  description: Minimum clusters for auto-detection
                max_clusters:
                  type: number
                  minimum: 2
                  maximum: 20
                  default: 10
                  description: Maximum clusters for auto-detection
                generate_labels:
                  type: boolean
                  default: true
                  description: Whether to generate AI labels for clusters
                environment:
                  type: string
                  description: Environment to cluster (development, staging, production)
                  enum: [development, staging, production]
                  example: "production"
      responses:
        '200':
          description: Clustering completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  clusters:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: number
                          description: Cluster ID
                          example: 0
                        label:
                          type: string
                          description: AI-generated cluster description
                          example: "Cluster focused on: electronics, gadgets, technology"
                        size:
                          type: number
                          description: Number of records in cluster
                          example: 45
                        sample_records:
                          type: array
                          items:
                            type: object
                            additionalProperties: true
                          description: 3-5 representative records from cluster
                        centroid:
                          type: array
                          items:
                            type: number
                          description: Cluster center embedding (first 10 dimensions)
                          example: [0.123, -0.456, 0.789, -0.321, 0.654, 0.987, -0.234, 0.567, -0.890, 0.123]
                  optimal_k:
                    type: number
                    description: Determined optimal cluster count
                    example: 5
                  silhouette_score:
                    type: number
                    description: Clustering quality metric (0-1)
                    example: 0.75
                  iterations:
                    type: number
                    description: Number of K-means iterations performed
                    example: 12
                  executionTime:
                    type: number
                    description: Clustering execution time in milliseconds
                    example: 2341
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-code-samples:
        - lang: curl
          source: |
            curl -X POST "https://api.worqhat.com/db/cluster" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer YOUR_API_KEY" \
              -d '{
                "table": "products",
                "num_clusters": 5,
                "generate_labels": true,
                "environment": "production"
              }'

  /storage/upload:
    post:
      summary: Upload a file to S3 storage
      description: |
        Uploads a file to S3 storage and returns the file ID and metadata.
        Optionally specify a custom path within the organization's storage bucket.
      tags:
        - Storage
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: File to upload (max 50MB)
                path:
                  type: string
                  description: Optional custom path within organization storage
                  example: "documents/invoices/"
      responses:
        '201':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  file:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                      filename:
                        type: string
                        example: "invoice_2025.pdf"
                      path:
                        type: string
                        example: "org_123/documents/invoices/invoice_2025.pdf"
                      size:
                        type: integer
                        description: File size in bytes
                        example: 245678
                      contentType:
                        type: string
                        example: "application/pdf"
                      uploadedAt:
                        type: string
                        format: date-time
                        example: "2025-07-26T03:28:08.123Z"
                      url:
                        type: string
                        format: uri
                        example: "https://storage.worqhat.com/org_123/documents/invoices/invoice_2025.pdf"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '413':
          description: File too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/ServerError'
      x-code-samples:
        - lang: curl
          source: |
            curl -X POST "https://api.worqhat.com/storage/upload" \
              -H "Authorization: Bearer YOUR_API_KEY" \
              -F "file=@/path/to/file.pdf" \
              -F "path=documents/invoices/"
        - lang: javascript
          source: |
            const formData = new FormData();
            const fileInput = document.querySelector('input[type="file"]');
            formData.append('file', fileInput.files[0]);
            formData.append('path', 'documents/invoices/');
            
            const response = await fetch('https://api.worqhat.com/storage/upload', {
              method: 'POST',
              headers: {
                'Authorization': 'Bearer YOUR_API_KEY'
              },
              body: formData
            });
            const data = await response.json();

  /storage/fetch/{fileId}:
    get:
      summary: Fetch file by ID
      description: |
        Retrieves a file from storage by its unique ID.
        Returns the file metadata and a download URL.
      tags:
        - Storage
      security:
        - ApiKeyAuth: []
      parameters:
        - name: fileId
          in: path
          description: Unique ID of the file to fetch
          required: true
          schema:
            type: string
            format: uuid
            example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
      responses:
        '200':
          description: File retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  file:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                      filename:
                        type: string
                        example: "invoice_2025.pdf"
                      path:
                        type: string
                        example: "org_123/documents/invoices/invoice_2025.pdf"
                      size:
                        type: integer
                        example: 245678
                      contentType:
                        type: string
                        example: "application/pdf"
                      uploadedAt:
                        type: string
                        format: date-time
                        example: "2025-07-26T03:28:08.123Z"
                      url:
                        type: string
                        format: uri
                        description: Signed URL for downloading the file (expires in 1 hour)
                        example: "https://storage.worqhat.com/org_123/documents/invoices/invoice_2025.pdf?signature=..."
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/ServerError'
      x-code-samples:
        - lang: curl
          source: |
            curl -X GET "https://api.worqhat.com/storage/fetch/a1b2c3d4-e5f6-7890-abcd-ef1234567890" \
              -H "Authorization: Bearer YOUR_API_KEY"
        - lang: javascript
          source: |
            const response = await fetch('https://api.worqhat.com/storage/fetch/a1b2c3d4-e5f6-7890-abcd-ef1234567890', {
              headers: {
                'Authorization': 'Bearer YOUR_API_KEY'
              }
            });
            const data = await response.json();

  /storage/fetch-by-path:
    get:
      summary: Fetch file by path
      description: |
        Retrieves a file from storage by its path within the organization's storage.
        Returns the file metadata and a download URL.
      tags:
        - Storage
      security:
        - ApiKeyAuth: []
      parameters:
        - name: filepath
          in: query
          description: Path to the file within organization storage
          required: true
          schema:
            type: string
            example: "documents/invoices/invoice_2025.pdf"
      responses:
        '200':
          description: File retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  file:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                      filename:
                        type: string
                        example: "invoice_2025.pdf"
                      path:
                        type: string
                        example: "org_123/documents/invoices/invoice_2025.pdf"
                      size:
                        type: integer
                        example: 245678
                      contentType:
                        type: string
                        example: "application/pdf"
                      uploadedAt:
                        type: string
                        format: date-time
                        example: "2025-07-26T03:28:08.123Z"
                      url:
                        type: string
                        format: uri
                        description: Signed URL for downloading the file (expires in 1 hour)
                        example: "https://storage.worqhat.com/org_123/documents/invoices/invoice_2025.pdf?signature=..."
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/ServerError'
      x-code-samples:
        - lang: curl
          source: |
            curl -X GET "https://api.worqhat.com/storage/fetch-by-path?filepath=documents/invoices/invoice_2025.pdf" \
              -H "Authorization: Bearer YOUR_API_KEY"
        - lang: javascript
          source: |
            const response = await fetch('https://api.worqhat.com/storage/fetch-by-path?filepath=documents/invoices/invoice_2025.pdf', {
              headers: {
                'Authorization': 'Bearer YOUR_API_KEY'
              }
            });
            const data = await response.json();

  /storage/delete/{fileId}:
    delete:
      summary: Delete file by ID
      description: |
        Permanently deletes a file from storage by its unique ID.
        This action cannot be undone.
      tags:
        - Storage
      security:
        - ApiKeyAuth: []
      parameters:
        - name: fileId
          in: path
          description: Unique ID of the file to delete
          required: true
          schema:
            type: string
            format: uuid
            example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
      responses:
        '200':
          description: File deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "File deleted successfully"
                  deletedAt:
                    type: string
                    format: date-time
                    example: "2025-07-26T03:28:08.123Z"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/ServerError'
      x-code-samples:
        - lang: curl
          source: |
            curl -X DELETE "https://api.worqhat.com/storage/delete/a1b2c3d4-e5f6-7890-abcd-ef1234567890" \
              -H "Authorization: Bearer YOUR_API_KEY"
        - lang: javascript
          source: |
            const response = await fetch('https://api.worqhat.com/storage/delete/a1b2c3d4-e5f6-7890-abcd-ef1234567890', {
              method: 'DELETE',
              headers: {
                'Authorization': 'Bearer YOUR_API_KEY'
              }
            });
            const data = await response.json();
